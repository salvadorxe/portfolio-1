---

---

<div class="w-80 h-80 p-2 bg-white rounded-lg">
  <div id="interactive-grid" class="grid grid-cols-5 gap-0.5 w-full h-full">
  </div>
</div>

<style>
  /* Safeguard for mobile device */
  @media (hover: none) {
    .mobile-disable {
      pointer-events: none;
    }
  }
  @media (max-width: 768px) {
    .mobile-disable {
      pointer-events: none;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const grid = Array.from({ length: 25 }, (_, i) => i);
    const activeCells = new Map();
    let currentCell: number | null = null;

    type CellData = {
      timestamp: number;
      color: string;
    };

    const colors = [
      "#8B0000", // Dark red
      "#C73E3E", // Medium red
      "#D35656", // Light red
      "#8B4513", // Saddle brown
      "#A0522D", // Sienna
      "#DEB887", // Burlywood (light brown)
      "#CD853F", // Peru (warm brown)
      "#DAA520", // Goldenrod
    ];

    const interactiveGrid = document.getElementById("interactive-grid");
    // Early return with type assertion
    if (!interactiveGrid) {
      console.warn("Interactive grid not found");
      return;
    }

    // Now TypeScript knows interactiveGrid is not null
    interactiveGrid.innerHTML = "";

    grid.forEach((index) => {
      const cell = document.createElement("div") as HTMLDivElement;
      cell.dataset.index = index.toString();
      cell.className =
        "aspect-square transition-all duration-200 ease-out cursor-crosshair";
      cell.style.backgroundColor = "#ffffff";
      cell.style.transform = "scale(1)";
      cell.addEventListener("mouseenter", () => handleMouseEnter(index));
      cell.addEventListener("mouseleave", () => handleMouseLeave(index));
      interactiveGrid.appendChild(cell);
    });

    let animationFrameId: number | null = null;

    function handleMouseEnter(index: number): void {
      const now = Date.now();
      currentCell = index;

      activeCells.set(index, {
        timestamp: now,
        color: colors[Math.floor(Math.random() * colors.length)],
      } satisfies CellData);

      //active cell
      const cell = interactiveGrid?.querySelector(
        `[data-index="${index}"]`
      ) as HTMLDivElement;
      if (cell) {
        cell.style.transform = "scale(1.15)";
        cell.style.zIndex = "10";
      }

      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }

      updateCellColors();

      setTimeout(() => {
        activeCells.delete(index);
        updateCellColors();
      }, 2000);
    }

    function handleMouseLeave(index: number): void {
      if (currentCell === index) {
        currentCell = null;
        const cell = interactiveGrid?.querySelector(
          `[data-index="${index}"]`
        ) as HTMLDivElement;
        if (cell) {
          cell.style.transform = "scale(1)";
          cell.style.zIndex = "1";
        }
      }
    }

    function updateCellColors(): void {
      const now = Date.now();

      if (!interactiveGrid) {
        throw new Error("Interactive grid element is missing in the DOM.");
      }

      grid.forEach((index) => {
        // Ensure the element exists
        const cellData = activeCells.get(index) as CellData | undefined;
        const cell = interactiveGrid.querySelector(
          `[data-index="${index}"]`
        ) as HTMLDivElement | null;

        // Safeguard for null cells
        if (!cell) return;

        if (cellData) {
          const age = now - cellData.timestamp;
          const opacity = Math.max(0, 1 - age / 2000);

          const rgb = hexToRgb(cellData.color);
          if (!rgb) return;

          const interpolatedColor = interpolateColors(
            [255, 255, 255],
            [rgb.r, rgb.g, rgb.b],
            opacity
          );

          cell.style.backgroundColor = `rgb(${interpolatedColor.join(",")})`;
        } else {
          cell.style.backgroundColor = "#ffffff";
        }
      });

      if (activeCells.size > 0) {
        animationFrameId = requestAnimationFrame(updateCellColors);
      }
    }

    function hexToRgb(hex: string): { r: number; g: number; b: number } | null {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
          }
        : null;
    }

    function interpolateColors(
      color1: number[],
      color2: number[],
      factor: number
    ): number[] {
      return color1.map((start, i) => {
        const end = color2[i];
        return Math.round(start + (end - start) * factor);
      });
    }

    updateCellColors();
  });

  document.addEventListener("astro:before-preparation", () => {
    const interactiveGrid = document.getElementById("interactive-grid");
    if (interactiveGrid) {
      interactiveGrid.innerHTML = "";
    }
  });
</script>
